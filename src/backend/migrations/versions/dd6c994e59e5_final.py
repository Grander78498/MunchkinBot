# pylint: skip-file
"""Final

Revision ID: dd6c994e59e5
Revises: 10d47fda113c
Create Date: 2025-04-23 12:03:02.403313

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dd6c994e59e5'
down_revision: Union[str, None] = '10d47fda113c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('LT', 'LE', 'EQ', 'NQ', 'GE', 'GT', name='equaltype').create(op.get_bind())
    op.create_table('action',
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('optional', sa.Boolean(), nullable=False),
    sa.Column('has_death', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_action'))
    )
    op.create_table('possibleconditiontype',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_possibleconditiontype'))
    )
    op.create_table('cardaction',
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.Column('card_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['action.id'], name=op.f('fk_cardaction_action_id_action')),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], name=op.f('fk_cardaction_card_id_card')),
    sa.PrimaryKeyConstraint('action_id', 'card_id', name=op.f('pk_cardaction'))
    )
    op.create_table('cardstransfer',
    sa.Column('cards_count', sa.SmallInteger(), nullable=False),
    sa.Column('is_open', sa.Boolean(), nullable=False),
    sa.Column('giveaway', sa.Boolean(), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['action.id'], name=op.f('fk_cardstransfer_action_id_action')),
    sa.PrimaryKeyConstraint('action_id', name=op.f('pk_cardstransfer'))
    )
    op.create_table('creatureupdate',
    sa.Column('amount', sa.SmallInteger(), nullable=False),
    sa.Column('to_remove', sa.Boolean(), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['action.id'], name=op.f('fk_creatureupdate_action_id_action')),
    sa.PrimaryKeyConstraint('action_id', name=op.f('pk_creatureupdate'))
    )
    op.create_table('possibleconditionfield',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.ForeignKeyConstraint(['type_id'], ['possibleconditiontype.id'], name=op.f('fk_possibleconditionfield_type_id_possibleconditiontype')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_possibleconditionfield'))
    )
    op.create_table('statschange',
    sa.Column('amount', sa.SmallInteger(), nullable=False),
    sa.Column('positive', sa.Boolean(), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['action.id'], name=op.f('fk_statschange_action_id_action')),
    sa.PrimaryKeyConstraint('action_id', name=op.f('pk_statschange'))
    )
    op.create_table('possibleconditionvalue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('field_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['possibleconditionfield.id'], name=op.f('fk_possibleconditionvalue_field_id_possibleconditionfield')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_possibleconditionvalue'))
    )
    op.create_table('actionmunchkin',
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.Column('munchkin_id', sa.Integer(), nullable=False),
    sa.Column('is_initiator', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['action.id'], name=op.f('fk_actionmunchkin_action_id_action')),
    sa.ForeignKeyConstraint(['munchkin_id'], ['munchkin.id'], name=op.f('fk_actionmunchkin_munchkin_id_munchkin')),
    sa.PrimaryKeyConstraint('action_id', 'munchkin_id', name=op.f('pk_actionmunchkin'))
    )
    op.create_table('condition',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value_id', sa.Integer(), nullable=False),
    sa.Column('equal_type', postgresql.ENUM('LT', 'LE', 'EQ', 'NQ', 'GE', 'GT', name='equaltype', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['value_id'], ['possibleconditionvalue.id'], name=op.f('fk_condition_value_id_possibleconditionvalue')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_condition'))
    )
    op.create_table('actioncondition',
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['action.id'], name=op.f('fk_actioncondition_action_id_action')),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.id'], name=op.f('fk_actioncondition_condition_id_condition')),
    sa.PrimaryKeyConstraint('action_id', 'condition_id', name=op.f('pk_actioncondition'))
    )
    op.create_table('cardstransfercondition',
    sa.Column('cards_transfer_id', sa.Integer(), nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cards_transfer_id'], ['cardstransfer.action_id'], name=op.f('fk_cardstransfercondition_cards_transfer_id_cardstransfer')),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.id'], name=op.f('fk_cardstransfercondition_condition_id_condition')),
    sa.PrimaryKeyConstraint('cards_transfer_id', 'condition_id', name=op.f('pk_cardstransfercondition'))
    )
    op.create_table('itemcondition',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.id'], name=op.f('fk_itemcondition_condition_id_condition')),
    sa.ForeignKeyConstraint(['item_id'], ['item.card_id'], name=op.f('fk_itemcondition_item_id_item')),
    sa.PrimaryKeyConstraint('item_id', 'condition_id', name=op.f('pk_itemcondition'))
    )
    op.sync_enum_values(
        enum_schema='public',
        enum_name='gender',
        new_values=['MALE', 'FEMALE', 'OTHER'],
        affected_columns=[TableReference(table_schema='public', table_name='munchkin', column_name='gender')],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema='public',
        enum_name='gender',
        new_values=['MALE', 'FEMALE'],
        affected_columns=[TableReference(table_schema='public', table_name='munchkin', column_name='gender')],
        enum_values_to_rename=[],
    )
    op.drop_table('itemcondition')
    op.drop_table('cardstransfercondition')
    op.drop_table('actioncondition')
    op.drop_table('condition')
    op.drop_table('actionmunchkin')
    op.drop_table('possibleconditionvalue')
    op.drop_table('statschange')
    op.drop_table('possibleconditionfield')
    op.drop_table('creatureupdate')
    op.drop_table('cardstransfer')
    op.drop_table('cardaction')
    op.drop_table('possibleconditiontype')
    op.drop_table('action')
    sa.Enum('LT', 'LE', 'EQ', 'NQ', 'GE', 'GT', name='equaltype').drop(op.get_bind())
    # ### end Alembic commands ###
