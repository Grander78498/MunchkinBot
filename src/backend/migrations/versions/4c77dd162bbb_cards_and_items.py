# pylint: skip-file
"""Cards and items

Revision ID: 4c77dd162bbb
Revises: c19bfe0dbfab
Create Date: 2025-04-22 09:34:05.283438

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4c77dd162bbb'
down_revision: Union[str, None] = 'c19bfe0dbfab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('DOOR_DECK',
            'TREASURE_DECK',
            'DOOR_DISCARD',
            'TREASURE_DISCARD',
            'PLAYER',
            name='sourcetype').create(op.get_bind())
    op.create_table(
        'gamecard',
        sa.Column('name',
                  sqlmodel.sql.sqltypes.AutoString(length=64),
                  nullable=False),
        sa.Column('image_path',
                  sqlmodel.sql.sqltypes.AutoString(length=64),
                  nullable=False),
        sa.Column('description',
                  sqlmodel.sql.sqltypes.AutoString(),
                  nullable=False), sa.Column('id',
                                             sa.Integer(),
                                             nullable=False),
        sa.Column('card_id', sa.Integer(), nullable=False),
        sa.Column('card_type',
                  postgresql.ENUM('DOOR',
                                  'TREASURE',
                                  name='cardtype',
                                  create_type=False),
                  nullable=False),
        sa.Column('source_type',
                  postgresql.ENUM('DOOR_DECK',
                                  'TREASURE_DECK',
                                  'DOOR_DISCARD',
                                  'TREASURE_DISCARD',
                                  'PLAYER',
                                  name='sourcetype',
                                  create_type=False),
                  nullable=False),
        sa.Column('open', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['card_id'], ['card.id'],
                                name=op.f('fk_gamecard_card_id_card')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_gamecard')),
        sa.UniqueConstraint('image_path', name=op.f('uq_gamecard_image_path')),
        sa.UniqueConstraint('name', name=op.f('uq_gamecard_name')))
    op.create_table(
        'gameitem',
        sa.Column('name',
                  sqlmodel.sql.sqltypes.AutoString(length=64),
                  nullable=False),
        sa.Column('image_path',
                  sqlmodel.sql.sqltypes.AutoString(length=64),
                  nullable=False),
        sa.Column('card_type',
                  postgresql.ENUM('DOOR',
                                  'TREASURE',
                                  name='cardtype',
                                  create_type=False),
                  nullable=False),
        sa.Column('runaway_bonus', sa.Integer(), nullable=True),
        sa.Column('one_shot', sa.Boolean(), nullable=False),
        sa.Column('is_big', sa.Boolean(), nullable=False),
        sa.Column('is_hireling', sa.Boolean(), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('bonus', sa.SmallInteger(), nullable=False),
        sa.Column('item_type',
                  postgresql.ENUM('HEADGEAR',
                                  'ARMOR',
                                  'FOOTGEAR',
                                  'HAND',
                                  name='itemtype',
                                  create_type=False),
                  nullable=True),
        sa.Column('price', sa.SmallInteger(), nullable=True),
        sa.Column('hand_count', sa.SmallInteger(), nullable=True),
        sa.Column('item_property',
                  postgresql.ENUM('FLAME',
                                  'WOODEN',
                                  'STICK',
                                  name='itemproperty',
                                  create_type=False),
                  nullable=True),
        sa.Column('game_card_id', sa.Integer(), nullable=False),
        sa.Column('original_item_id', sa.Integer(), nullable=False),
        sa.Column('runway_bonus', sa.SmallInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ['game_card_id'], ['gamecard.id'],
            name=op.f('fk_gameitem_game_card_id_gamecard')),
        sa.ForeignKeyConstraint(
            ['original_item_id'], ['item.card_id'],
            name=op.f('fk_gameitem_original_item_id_item')),
        sa.PrimaryKeyConstraint('game_card_id', name=op.f('pk_gameitem')),
        sa.UniqueConstraint('description',
                            name=op.f('uq_gameitem_description')),
        sa.UniqueConstraint('image_path', name=op.f('uq_gameitem_image_path')),
        sa.UniqueConstraint('name', name=op.f('uq_gameitem_name')))
    op.create_table(
        'munchkincard', sa.Column('munchkin_id', sa.Integer(), nullable=False),
        sa.Column('card_id', sa.Integer(), nullable=False),
        sa.Column('in_game', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['card_id'], ['gamecard.id'],
                                name=op.f('fk_munchkincard_card_id_gamecard')),
        sa.ForeignKeyConstraint(
            ['munchkin_id'], ['munchkin.id'],
            name=op.f('fk_munchkincard_munchkin_id_munchkin')),
        sa.PrimaryKeyConstraint('munchkin_id',
                                'card_id',
                                name=op.f('pk_munchkincard')))
    op.create_table(
        'munchkinitem', sa.Column('munchkin_id', sa.Integer(), nullable=False),
        sa.Column('item_id', sa.Integer(), nullable=False),
        sa.Column('in_game', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['item_id'], ['gameitem.game_card_id'],
                                name=op.f('fk_munchkinitem_item_id_gameitem')),
        sa.ForeignKeyConstraint(
            ['munchkin_id'], ['munchkin.id'],
            name=op.f('fk_munchkinitem_munchkin_id_munchkin')),
        sa.PrimaryKeyConstraint('munchkin_id',
                                'item_id',
                                name=op.f('pk_munchkinitem')))
    op.add_column('item',
                  sa.Column('hand_count', sa.SmallInteger(), nullable=True))
    op.sync_enum_values(
        enum_schema='public',
        enum_name='itemtype',
        new_values=['HEADGEAR', 'ARMOR', 'FOOTGEAR', 'HAND'],
        affected_columns=[
            TableReference(table_schema='public',
                           table_name='gameitem',
                           column_name='item_type'),
            TableReference(table_schema='public',
                           table_name='item',
                           column_name='item_type')
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema='public',
        enum_name='itemtype',
        new_values=[
            'HEADGEAR', 'ARMOR', 'FOOTGEAR', 'ONE_HAND', 'TWO_HAND',
            'THREE_HAND', 'MINUS_HAND'
        ],
        affected_columns=[
            TableReference(table_schema='public',
                           table_name='gameitem',
                           column_name='item_type'),
            TableReference(table_schema='public',
                           table_name='item',
                           column_name='item_type')
        ],
        enum_values_to_rename=[],
    )
    op.drop_column('item', 'hand_count')
    op.drop_table('munchkinitem')
    op.drop_table('munchkincard')
    op.drop_table('gameitem')
    op.drop_table('gamecard')
    sa.Enum('DOOR_DECK',
            'TREASURE_DECK',
            'DOOR_DISCARD',
            'TREASURE_DISCARD',
            'PLAYER',
            name='sourcetype').drop(op.get_bind())
    # ### end Alembic commands ###
