# pylint: skip-file
"""Test3

Revision ID: c6cbf9676df6
Revises: efaebf42bebf
Create Date: 2025-04-21 22:14:55.807010

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c6cbf9676df6'
down_revision: Union[str, None] = 'efaebf42bebf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('FLAME', 'WOODEN', 'STICK', name='itemproperty').create(op.get_bind())
    sa.Enum('HEADGEAR', 'ARMOR', 'FOOTGEAR', 'ONE_HAND', 'TWO_HAND', 'THREE_HAND', 'MINUS_HAND', name='itemtype').create(op.get_bind())
    sa.Enum('DOOR', 'TREASURE', name='cardtype').create(op.get_bind())
    op.create_table('card',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('image_path', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('card_type', postgresql.ENUM('DOOR', 'TREASURE', name='cardtype', create_type=False), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('description'),
    sa.UniqueConstraint('image_path'),
    sa.UniqueConstraint('name')
    )
    op.create_table('item',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('image_path', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('card_type', postgresql.ENUM('DOOR', 'TREASURE', name='cardtype', create_type=False), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('bonus', sa.SmallInteger(), nullable=False),
    sa.Column('runaway_bonus', sa.Integer(), nullable=True),
    sa.Column('one_shot', sa.Boolean(), nullable=False),
    sa.Column('is_big', sa.Boolean(), nullable=False),
    sa.Column('is_hireling', sa.Boolean(), nullable=False),
    sa.Column('price', sa.SmallInteger(), nullable=True),
    sa.Column('item_type', postgresql.ENUM('HEADGEAR', 'ARMOR', 'FOOTGEAR', 'ONE_HAND', 'TWO_HAND', 'THREE_HAND', 'MINUS_HAND', name='itemtype', create_type=False), nullable=True),
    sa.Column('item_property', postgresql.ENUM('FLAME', 'WOODEN', 'STICK', name='itemproperty', create_type=False), nullable=True),
    sa.Column('card_id', sa.Integer(), nullable=False),
    sa.Column('runway_bonus', sa.SmallInteger(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ),
    sa.PrimaryKeyConstraint('card_id'),
    sa.UniqueConstraint('description'),
    sa.UniqueConstraint('image_path'),
    sa.UniqueConstraint('name')
    )
    op.alter_column('combat', 'difference',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkin', 'gender',
               existing_type=postgresql.ENUM('MALE', 'FEMALE', name='gender'),
               nullable=False)
    op.alter_column('munchkin', 'number',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkin', 'level',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkin', 'strength',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkin', 'luck',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkin', 'runaway_bonus',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkincombat', 'modifier',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('munchkincombat', 'runaway_bonus',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('turn', 'turn_type',
               existing_type=postgresql.ENUM('KICK_DOOR', 'LOOK_TROUBLE', 'LOOT_ROOM', 'CHARITY', 'COMBAT', name='turntype'),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('turn', 'turn_type',
               existing_type=postgresql.ENUM('KICK_DOOR', 'LOOK_TROUBLE', 'LOOT_ROOM', 'CHARITY', 'COMBAT', name='turntype'),
               nullable=True)
    op.alter_column('munchkincombat', 'runaway_bonus',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkincombat', 'modifier',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkin', 'runaway_bonus',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkin', 'luck',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkin', 'strength',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkin', 'level',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkin', 'number',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('munchkin', 'gender',
               existing_type=postgresql.ENUM('MALE', 'FEMALE', name='gender'),
               nullable=True)
    op.alter_column('combat', 'difference',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.drop_table('item')
    op.drop_table('card')
    sa.Enum('DOOR', 'TREASURE', name='cardtype').drop(op.get_bind())
    sa.Enum('HEADGEAR', 'ARMOR', 'FOOTGEAR', 'ONE_HAND', 'TWO_HAND', 'THREE_HAND', 'MINUS_HAND', name='itemtype').drop(op.get_bind())
    sa.Enum('FLAME', 'WOODEN', 'STICK', name='itemproperty').drop(op.get_bind())
    # ### end Alembic commands ###
